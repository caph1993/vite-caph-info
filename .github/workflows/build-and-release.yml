name: Build and release

on:
  push:
    branches:
      - dev  # Trigger the workflow on pushes to this branch

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies and build
        run: |
          corepack enable
          pnpm install
          pnpm build
      
      - name: Merge dev to main (if build succeeded)
        if: success()  # Merge to main only if build is successful
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Robust merge: try to merge dev into main and push.
          # If merge or push fails (conflicts or protected branch), create a PR from an automated branch instead.
          set -uo pipefail
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

          # Use token-authenticated URL so push can authenticate
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"

          # Fetch both branches
          git fetch origin --prune
          git fetch origin main dev || true

          # Ensure local main tracks origin/main (create if missing)
          if git rev-parse --verify origin/main >/dev/null 2>&1; then
            git checkout -B main origin/main
          else
            git checkout -B main || true
          fi

          # Attempt merge
          MERGE_MSG="Automated merge of dev into main after successful build"
          if git merge --no-edit --no-ff origin/dev -m "$MERGE_MSG" --allow-unrelated-histories; then
            echo "Local merge succeeded"
            # Try pushing to main. If push fails (e.g., protected branch), fall back to creating a PR branch.
            if git push origin main; then
              echo "Pushed merged main to origin/main"
            else
              echo "Push to origin/main failed (protected branch or permissions). Creating PR branch instead."
              BRANCH="automated/dev-to-main-$(date +%s)"
              git checkout -B "$BRANCH"
              git push -u origin "$BRANCH" || true
              PR_TITLE="Automated PR: merge dev into main"
              PR_BODY="Automated PR created because pushing a direct merge to main failed (protected branch or permissions). Please review and merge."
              # Create PR via GitHub API
              if command -v jq >/dev/null 2>&1; then
                payload=$(jq -n --arg title "$PR_TITLE" --arg head "$BRANCH" --arg base "main" --arg body "$PR_BODY" '{title:$title,head:$head,base:$base,body:$body}')
              else
                payload=$(printf '{"title":"%s","head":"%s","base":"%s","body":"%s"}' "$PR_TITLE" "$BRANCH" "main" "$PR_BODY")
              fi
              curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
                -d "$payload" "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls" || true
            fi
          else
            echo "Automatic merge had conflicts or failed. Aborting merge and creating PR branch."
            git merge --abort || true
            BRANCH="automated/dev-to-main-$(date +%s)"
            # Create branch from origin/dev so PR shows dev changes cleanly
            git checkout -B "$BRANCH" origin/dev || git checkout -B "$BRANCH" || true
            git push -u origin "$BRANCH" || true
            PR_TITLE="Automated PR: merge dev into main (conflicts)"
            PR_BODY="Automatic merge of dev into main failed due to conflicts. This PR was created so maintainers can resolve and merge."
            if command -v jq >/dev/null 2>&1; then
              payload=$(jq -n --arg title "$PR_TITLE" --arg head "$BRANCH" --arg base "main" --arg body "$PR_BODY" '{title:$title,head:$head,base:$base,body:$body}')
            else
              payload=$(printf '{"title":"%s","head":"%s","base":"%s","body":"%s"}' "$PR_TITLE" "$BRANCH" "main" "$PR_BODY")
            fi
            curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
              -d "$payload" "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls" || true
          fi
        
      - name: Generate timestamp
        id: timestamp
        run: echo "TAG_NAME=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      # - name: Create a release archive
      #   run: tar -czf dist.tar.gz dist

      - name: Create a release archive
        run: |
          mkdir tmp-dist
          mv dist tmp-dist/dist
          tar -czf dist.tar.gz -C tmp-dist dist
          rm -rf tmp-dist

      - name: List files
        run: ls -R

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Upload dist folder as asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.tar.gz
          asset_name: dist.tar.gz
          asset_content_type: application/gzip
      
      - name: Get releases
        id: releases
        run: |
          curl -s https://api.github.com/repos/${{ github.repository }}/releases | jq '.[].id' > release_ids.txt

      - name: Delete old releases
        run: |
          # Adjust this to your criteria for "old" releases, e.g., keep the latest 3
          releases_to_delete=$(tail -n +4 release_ids.txt)  # Delete releases older than the latest 3
          for release_id in $releases_to_delete; do
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/$release_id
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify webhook
        env:
          WEBHOOK_URL: https://caph.info/hooks/github-webhook
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          payload=$(jq -n --arg tag "${GITHUB_REF#refs/tags/}" '{"ref":$tag}')
          signature="sha256=$(echo -n "$payload" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" | sed 's/^.* //')"
          curl -X POST \
               -H "X-Hub-Signature-256: $signature" \
               -H "Content-Type: application/json" \
               -d "$payload" \
               "$WEBHOOK_URL"

      # - name: Deploy to GitHub Pages
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: ./dist



