name: Build and release

on:
  push:
    branches:
      - dev  # Trigger the workflow on pushes to this branch

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies and build
        run: |
          corepack enable
          pnpm install
          pnpm build
      
      - name: Merge dev to main (if build succeeded)
        if: success()  # Merge to main only if build is successful
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Robust rebase: rebase dev onto main and fast-forward main.
          # If rebase or push fails (conflicts or protected branch), open a PR from the existing `dev` branch
          # instead of creating automated branches to avoid branch proliferation.
          set -uo pipefail
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

          # Use token-authenticated URL so push can authenticate
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"

          # Fetch branches
          git fetch origin --prune
          git fetch origin main dev || true

          # Ensure local main tracks origin/main (create if missing)
          if git rev-parse --verify origin/main >/dev/null 2>&1; then
            git checkout -B main origin/main
          else
            git checkout -B main || true
          fi

          # Create local dev branch from origin/dev
          git checkout -B dev origin/dev || git checkout -B dev || true

          # Attempt to rebase dev onto origin/main
          if git rebase origin/main; then
            echo "Rebase of dev onto origin/main succeeded"
            # Try to fast-forward main to dev
            git checkout main
            if git merge --ff-only dev; then
              echo "Fast-forwarded main to include dev changes"
              # Try pushing to main. If push fails (protected branch), open a PR from the existing `dev` branch instead.
              if git push origin main; then
                echo "Pushed rebased main to origin/main"
              else
                echo "Push to origin/main failed (protected branch or permissions). Creating PR from 'dev' instead."
                PR_TITLE="Automated PR: rebase dev into main"
                PR_BODY="Automated PR created because pushing a direct rebase to main failed (protected branch or permissions). Please review and merge."
                if command -v jq >/dev/null 2>&1; then
                  payload=$(jq -n --arg title "$PR_TITLE" --arg head "dev" --arg base "main" --arg body "$PR_BODY" '{title:$title,head:$head,base:$base,body:$body}')
                else
                  payload=$(printf '{"title":"%s","head":"%s","base":"%s","body":"%s"}' "$PR_TITLE" "dev" "main" "$PR_BODY")
                fi
                curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
                  -d "$payload" "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls" || true
              fi
            else
              echo "Fast-forward of main to dev not possible. Creating PR from 'dev' for manual merge."
              PR_TITLE="Automated PR: rebase dev into main (non-ff)"
              PR_BODY="Fast-forward of main to dev was not possible after rebase. Please review the 'dev' branch and merge into main." 
              if command -v jq >/dev/null 2>&1; then
                payload=$(jq -n --arg title "$PR_TITLE" --arg head "dev" --arg base "main" --arg body "$PR_BODY" '{title:$title,head:$head,base:$base,body:$body}')
              else
                payload=$(printf '{"title":"%s","head":"%s","base":"%s","body":"%s"}' "$PR_TITLE" "dev" "main" "$PR_BODY")
              fi
              curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
                -d "$payload" "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls" || true
            fi
          else
            echo "Rebase failed due to conflicts. Aborting rebase and creating PR from existing 'dev' branch."
            git rebase --abort || true
            PR_TITLE="Automated PR: rebase dev into main (conflicts)"
            PR_BODY="Rebase of dev onto main failed due to conflicts. Please review the 'dev' branch and resolve conflicts when merging into main."
            if command -v jq >/dev/null 2>&1; then
              payload=$(jq -n --arg title "$PR_TITLE" --arg head "dev" --arg base "main" --arg body "$PR_BODY" '{title:$title,head:$head,base:$base,body:$body}')
            else
              payload=$(printf '{"title":"%s","head":"%s","base":"%s","body":"%s"}' "$PR_TITLE" "dev" "main" "$PR_BODY")
            fi
            curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
              -d "$payload" "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls" || true
          fi
        
      - name: Generate timestamp
        id: timestamp
        run: echo "TAG_NAME=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      # - name: Create a release archive
      #   run: tar -czf dist.tar.gz dist

      - name: Create a release archive
        run: |
          mkdir tmp-dist
          mv dist tmp-dist/dist
          tar -czf dist.tar.gz -C tmp-dist dist
          rm -rf tmp-dist

      - name: List files
        run: ls -R

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        # NOTE: Use a personal access token (PAT) stored as `secrets.RELEASE_TOKEN`
        # with `repo` scope. Events and webhook deliveries created by the
        # automatically provided GITHUB_TOKEN do NOT trigger other workflows.
        # Using a PAT will cause the release event to actually fire and allow
        # downstream workflows (like `rotate-releases` or other `release` listeners)
        # to run.
        # Provide the PAT to the action via the `token` input (the action
        # requires this). We keep the env var for other tools that might use it.
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Upload dist folder as asset
        uses: actions/upload-release-asset@v1
        # Use the same PAT so uploads and related API calls come from the PAT
        # and are recognized by GitHub as user-created events if needed.
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.tar.gz
          asset_name: dist.tar.gz
          asset_content_type: application/gzip
      


      # - name: Deploy to GitHub Pages
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: ./dist



